<?php

namespace Mapes\UserBundle\Repository;

#use Symfony\Component\Security\Core\User\UserInterface;
#use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * MemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberRepository extends EntityRepository implements UserLoaderInterface
{
    public function loadUserByUsername($username)
    {
        $q = $this
            ->createQueryBuilder('u')
            //->where('u.username = :username OR u.email = :email')
            //->setParameter('username', $username)
            ->where('u.email = :email')
            ->setParameter('email', $username)
            ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active user object identified by "%s".',
                $username
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }    
    
    public function findDuplicateByEmail($email, $userID)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.email = :email and u.ID <> :userID')
            ->setParameter('email', $email)
            ->setParameter('userID', $userID)
            ->getQuery();

        $query = $q->getQuery();

        $counter = $query->getSingleScalarResult();
        
        return $counter;
        
    }    
    
    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
            || is_subclass_of($class, $this->getEntityName());
    }
    
    public function getRecentCreatedMembers($max = null, $offset = null)
    {
        $qb = $this->createQueryBuilder('j')
          ->where('j.account_type = :account_type')
          ->setParameter('account_type', 'ROLE_USER')
          ->orderBy('j.created_at', 'DESC');

        if($max)
        {
          $qb->setMaxResults($max);
        }
        
        if($offset)
        {
          $qb->setFirstResult($offset);
        }

        $query = $qb->getQuery();

        return $query->getResult();
        
    }
	
	public function getRegistrationGroupbyMonth($start_date, $end_date)
	{
		$query = "SELECT m.created_at,count(m.created_at) as total
					FROM MapesUserBundle:Member m
					WHERE m.account_type in ('ROLE_USER', 'ROLE_SUPER_ADMIN')
						AND	m.created_at >= '".date('Y-m-d', strtotime($start_date))."'
						AND	m.created_at <= '".date('Y-m-d', strtotime($end_date))."'
					GROUP BY m.created_at
					ORDER BY m.created_at";
		$query = $this->_em->createQuery($query);
		$queryResult = $query->getResult();
		
		$groupByMonthResult = array();
		foreach($queryResult as $rs) {
			//echo (date('F Y', $rs['created_at'].date));die();
			$month = $rs['created_at']->format('F Y');
			if (!array_key_exists($month, $groupByMonthResult)) {
				$groupByMonthResult[$month] = 0;
			}
			$groupByMonthResult[$month] = $groupByMonthResult[$month] + $rs['total'];
		}
		
		return $groupByMonthResult;
	}
        
        
}
